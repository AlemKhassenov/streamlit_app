import streamlit as st
import pandas as pd
import requests
import io
import docx
from docx import Document

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API ChatGPT
def send_file_to_api(file, prompt):
    api_url = "https://api.openai.com/v1/chat/completions"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∞–¥—Ä–µ—Å
    api_key = "A"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á

    if api_key == "YOUR_API_KEY":
        return "–û—à–∏–±–∫–∞: API-–∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = file.getvalue()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Excel –≤ DataFrame
        df = pd.read_excel(io.BytesIO(file_content))

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ JSON-—Å—Ç—Ä–æ–∫—É
        file_data = df.to_json(orient="records")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        final_prompt = f"{prompt}\n\n–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞:\n{file_data}"

        payload = {
            "model": "gpt-4",
            "messages": [{"role": "user", "content": final_prompt}]
        }

        response = requests.post(api_url, json=payload, headers=headers)
        
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code}, {response.text}"
    
    except requests.exceptions.RequestException as e:
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DOCX-—Ñ–∞–π–ª–∞
def create_docx(student_name, student_class, subject, grade, gpt_response):
    doc = Document()
    
    doc.add_heading("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —É—á–µ–Ω–∏–∫–∞", level=1)

    doc.add_paragraph(f"–§–ò–û —É—á–µ–Ω–∏–∫–∞: {student_name}")
    doc.add_paragraph(f"–ö–ª–∞—Å—Å: {student_class}")
    doc.add_paragraph(f"–ü—Ä–µ–¥–º–µ—Ç: {subject}")
    doc.add_paragraph(f"–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: {grade}")

    doc.add_heading("–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", level=2)
    doc.add_paragraph(gpt_response)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –±—É—Ñ–µ—Ä
    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def set_background(image_url):
    page_bg = f"""
    <style>
    .stApp {{
        background: url("{image_url}") no-repeat center center fixed;
        background-size: cover;
    }}
    </style>
    """
    st.markdown(page_bg, unsafe_allow_html=True)

# –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
background_image_url = "https://images.pexels.com/photos/30388784/pexels-photo-30388784.jpeg?auto=compress&cs=tinysrgb&w=1200&lazy=load"
set_background(background_image_url)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —É—á–µ–Ω–∏–∫–∞ Quantum STEM School")

# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.form("student_form"):
    name = st.text_input("–§–ò–û —É—á–µ–Ω–∏–∫–∞")
    student_class = st.text_input("–ö–ª–∞—Å—Å")
    subject = st.selectbox("–ü—Ä–µ–¥–º–µ—Ç", ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"])
    
    grade = st.number_input("–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∏–∑ EduPage, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è –¥–æ —Ü–µ–ª—ã—Ö", min_value=0, max_value=100, step=1, value=0)

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏", type=["xls", "xlsx"])
    
    submit_button = st.form_submit_button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ü–ò–†")

if submit_button:
    if uploaded_file is None:
        st.error("–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª!")
    else:
        st.write("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑...")

        # –ü—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT
        prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–π–ª, –≤—ã—è–≤–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –Ω–∞–ø–∏—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ API –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        api_response = send_file_to_api(uploaded_file, prompt)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –≤ API-–æ—Ç–≤–µ—Ç–µ
        if "–û—à–∏–±–∫–∞" in api_response:
            st.error(api_response)
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ DOCX-—Ñ–∞–π–ª–∞
            doc_buffer = create_docx(name, student_class, subject, grade, api_response)

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (DOCX)",
                data=doc_buffer,
                file_name=f"–ò–ü–†_{name}.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

            st.success("–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ.")

