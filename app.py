import streamlit as st
import pandas as pd
import requests
import io
import os
from docx import Document

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞
if not API_KEY:
    st.error("–û—à–∏–±–∫–∞: API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –∏–ª–∏ GitHub Secrets.")
    st.stop()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
def load_data_from_google_sheets(student_name):
    try:
        sheet_url = "https://docs.google.com/spreadsheets/d/1BeXPi5LRSIj0xDjGZjey0VfBU08mnjJm/export?format=xlsx"
        xls = pd.ExcelFile(sheet_url)
        student_data_list = []
        
        for sheet_name in xls.sheet_names:
            df = pd.read_excel(xls, sheet_name=sheet_name)
            df.columns = df.columns.str.strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å –§–ò–û
            fio_column = next((col for col in df.columns if "–§–ò–û" in col), None)
            
            if fio_column:
                df[fio_column] = df[fio_column].fillna('').astype(str).str.strip()
                
                student_data = df[df[fio_column] == student_name.strip()]
                
                if not student_data.empty:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å, –∏—Å–∫–ª—é—á–∞—è —Å–∞–º —Å—Ç–æ–ª–±–µ—Ü –§–ò–û
                    student_info = student_data.drop(columns=[fio_column]).to_dict(orient='records')[0]
                    student_data_list.append(student_info)
        
        if not student_data_list:
            return None
        
        return student_data_list[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å –±–µ–∑ –§–ò–û
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API ChatGPT
def send_data_to_api(student_data, prompt):
    api_url = "https://api.openai.com/v1/chat/completions"

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    final_prompt = f"{prompt}\n\n–î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞:\n{student_data}"

    payload = {
        "model": "gpt-4",
        "messages": [{"role": "user", "content": final_prompt}],
        "max_tokens": 1000,
        "temperature": 0.7
    }

    response = requests.post(api_url, json=payload, headers=headers)
    
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return f"–û—à–∏–±–∫–∞ API: {response.status_code}, {response.text}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DOCX-—Ñ–∞–π–ª–∞
def create_docx(student_name, student_class, subject, grade, gpt_response):
    doc = Document()
    
    doc.add_heading("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —É—á–µ–Ω–∏–∫–∞", level=1)

    doc.add_paragraph(f"–§–ò–û —É—á–µ–Ω–∏–∫–∞: {student_name}")
    doc.add_paragraph(f"–ö–ª–∞—Å—Å: {student_class}")
    doc.add_paragraph(f"–ü—Ä–µ–¥–º–µ—Ç: {subject}")
    doc.add_paragraph(f"–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: {grade}")

    doc.add_heading("–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", level=2)
    doc.add_paragraph(gpt_response)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –±—É—Ñ–µ—Ä
    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    return buffer

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def set_background(image_url):
    page_bg = f"""
    <style>
    .stApp {{
        background: url("{image_url}") no-repeat center center fixed;
        background-size: cover;
    }}
    </style>
    """
    st.markdown(page_bg, unsafe_allow_html=True)

# –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
background_image_url = "https://images.pexels.com/photos/30388784/pexels-photo-30388784.jpeg?auto=compress&cs=tinysrgb&w=1200&lazy=load"
set_background(background_image_url)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —É—á–µ–Ω–∏–∫–∞ Quantum STEM School")

# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.form("student_form"):
    name = st.text_input("–§–ò–û —É—á–µ–Ω–∏–∫–∞")
    student_class = st.selectbox("–ö–ª–∞—Å—Å", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"])
    subject = st.selectbox("–ü—Ä–µ–¥–º–µ—Ç", ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"])
    grade = st.number_input("–¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∏–∑ EduPage, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è –¥–æ —Ü–µ–ª—ã—Ö", min_value=0, max_value=100, step=1, value=0)
    submit_button = st.form_submit_button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ü–ò–†")

if submit_button:
    st.write("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")
    student_data = load_data_from_google_sheets(name)
    
    if student_data is None:
        st.error("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –§–ò–û –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã.")
    else:
        st.write("–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
        
        prompt = """
–£—á–∞—â–∏–π—Å—è –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–∞–º. –í —Å—Ç–æ–ª–±—Ü–∞—Ö –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç –æ–±—É—á–µ–Ω–∏—è (—Ü–µ–ª–∏), –∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ —É–∫–∞–∑–∞–Ω–æ:
- 1 = —É—á–µ–Ω–∏–∫ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏.
- 0 = —É—á–µ–Ω–∏–∫ –Ω–µ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –∫–∞–∫–∏–µ —Ç–µ–º—ã —É—Å–≤–æ–µ–Ω—ã —Ö–æ—Ä–æ—à–æ, –∞ –∫–∞–∫–∏–µ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.  
–û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö –µ—Å—Ç—å —É —É—á–µ–Ω–∏–∫–∞, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ **—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**.  
–î–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–π —Ü–µ–ª–∏ (0) –ø—Ä–µ–¥–ª–æ–∂–∏ **—Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è**: 
- **–°—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ (YouTube, Coursera, Khan Academy –∏ —Ç. –¥.)**  
- **–ö–Ω–∏–≥–∏ / —Å—Ç–∞—Ç—å–∏ / –∫—É—Ä—Å—ã**  

–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:  
{student_data}
"""
        api_response = send_data_to_api(student_data, prompt)
        
        if "–û—à–∏–±–∫–∞" in api_response:
            st.error(api_response)
        else:
            doc_buffer = create_docx(name, student_class, subject, grade, api_response)
            st.download_button("üìÑ –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (DOCX)", data=doc_buffer, file_name=f"–ü–ò–†_{name}_{grade}.docx", mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")
            st.success("–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ.")
